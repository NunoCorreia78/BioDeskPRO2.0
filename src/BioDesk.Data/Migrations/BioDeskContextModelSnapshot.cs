// <auto-generated />
using System;
using BioDesk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioDesk.Data.Migrations
{
    [DbContext(typeof(BioDeskContext))]
    partial class BioDeskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("BioDesk.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AjustesTratamento")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Alergias")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Altura")
                        .HasColumnType("TEXT");

                    b.Property<string>("AmplitudeMovimento")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuralEnergetica")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvaliacacaoChakras")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvaliacaoPostural")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("BloqueiosEnergeticos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("CirurgiasAnteriores")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumoAgua")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumoAlcool")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContatoEmergencia")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiagnosticoEnergetico")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoChakraPrincipal")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoMeridianos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExerciciosRecomendados")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequenciaCardiaca")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FrequenciaSessoes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrequenciasDetectadas")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Fumador")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genero")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("HistoricoMedicoFamiliar")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("HistoricoMedicoPessoal")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("HistoricoTraumas")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InicioSintomas")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntoleranciasAlimentares")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicacaoAtual")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Morada")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MudancasEstiloVida")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NivelAtividadeFisica")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NivelStress")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NivelVitalidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotasSessoes")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumeroSessoesRealizadas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjetivosTratamento")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesExameFisico")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesGerais")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutrosHabitos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PadroesAlimentares")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PalpacaoTecidual")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PatternSono")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("TEXT");

                    b.Property<string>("PontosTensao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PosturaPrincipal")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PressaoDiastolica")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PressaoSistolica")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Profissao")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgressoSintomas")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProtocolosNaturopaticos")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProximaConsulta")
                        .HasColumnType("TEXT");

                    b.Property<int?>("QualidadeSono")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResultadosTestes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SintomasPrincipais")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SintomasSecundarios")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SuplementacaoRecomendada")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SuplementosAtuais")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefoneEmergencia")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TerapiasComplementares")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TestesEnergeticos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TestesOrtopedicos")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoExercicio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TratamentosOsteopaticos")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UltimaSessao")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Nome", "DataNascimento")
                        .IsUnique()
                        .HasDatabaseName("IX_Paciente_Unique");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtualizadoEm = new DateTime(2025, 9, 22, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            CriadoEm = new DateTime(2025, 8, 25, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            DataNascimento = new DateTime(1985, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ana.silva@email.com",
                            Fumador = false,
                            Nome = "Ana Silva",
                            Telefone = "912345678"
                        },
                        new
                        {
                            Id = 2,
                            AtualizadoEm = new DateTime(2025, 9, 19, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            CriadoEm = new DateTime(2025, 8, 30, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            DataNascimento = new DateTime(1978, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao.ferreira@email.com",
                            Fumador = false,
                            Nome = "João Ferreira",
                            Telefone = "925678912"
                        },
                        new
                        {
                            Id = 3,
                            AtualizadoEm = new DateTime(2025, 9, 23, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            CriadoEm = new DateTime(2025, 9, 4, 17, 49, 22, 197, DateTimeKind.Local).AddTicks(8667),
                            DataNascimento = new DateTime(1992, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria.costa@email.com",
                            Fumador = false,
                            Nome = "Maria Costa",
                            Telefone = "934567823"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
