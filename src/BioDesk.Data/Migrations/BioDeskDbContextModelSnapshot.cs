// <auto-generated />
using System;
using BioDesk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioDesk.Data.Migrations
{
    [DbContext(typeof(BioDeskDbContext))]
    partial class BioDeskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("BioDesk.Domain.Entities.AbordagemSessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("SessaoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoAbordagem")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SessaoId", "TipoAbordagem")
                        .IsUnique()
                        .HasDatabaseName("IX_AbordagensSessoes_SessaoId_TipoAbordagem");

                    b.ToTable("AbordagensSessoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SessaoId = 1,
                            TipoAbordagem = 3
                        },
                        new
                        {
                            Id = 2,
                            SessaoId = 2,
                            TipoAbordagem = 3
                        },
                        new
                        {
                            Id = 3,
                            Observacoes = "Suplementação adaptogénica",
                            SessaoId = 3,
                            TipoAbordagem = 1
                        },
                        new
                        {
                            Id = 4,
                            Observacoes = "Equilíbrio energético",
                            SessaoId = 3,
                            TipoAbordagem = 5
                        },
                        new
                        {
                            Id = 5,
                            SessaoId = 4,
                            TipoAbordagem = 3
                        },
                        new
                        {
                            Id = 6,
                            SessaoId = 5,
                            TipoAbordagem = 3
                        },
                        new
                        {
                            Id = 7,
                            Observacoes = "Análise constitucional",
                            SessaoId = 5,
                            TipoAbordagem = 4
                        },
                        new
                        {
                            Id = 8,
                            Observacoes = "Técnicas articulares joelhos e ombro",
                            SessaoId = 6,
                            TipoAbordagem = 3
                        },
                        new
                        {
                            Id = 9,
                            Observacoes = "Infiltrações anti-inflamatórias",
                            SessaoId = 6,
                            TipoAbordagem = 2
                        },
                        new
                        {
                            Id = 10,
                            Observacoes = "Protocolo anti-inflamatório oral",
                            SessaoId = 6,
                            TipoAbordagem = 1
                        });
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaAlimentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alimento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReacaoConhecida")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("AlergiaAlimentar");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaAmbiental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alergenio")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sintomas")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("AlergiaAmbiental");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaMedicamentosa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Medicamento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Reacao")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("AlergiaMedicamentosa");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AnexoComunicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ComunicacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("TamanhoBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComunicacaoId");

                    b.ToTable("AnexosComunicacoes");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Cirurgia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hospital")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoCirurgia")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("Cirurgia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Comunicacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Assunto")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Corpo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAbertura")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataEnvio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataFollowUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destinatario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FoiAberto")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FollowUpEnviado")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnviado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MensagemFollowUp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ProximaTentativa")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TemplateUtilizado")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TentativasEnvio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UltimoErro")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Comunicacoes");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.ConfiguracaoClinica", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Morada")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NIPC")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeClinica")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfiguracaoClinica");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2025, 10, 13, 13, 39, 37, 581, DateTimeKind.Utc).AddTicks(3369),
                            NomeClinica = "Minha Clínica"
                        });
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Consentimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternativasDisponiveis")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssinaturaDigital")
                        .HasColumnType("TEXT");

                    b.Property<string>("BeneficiosEsperados")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CompreendeNatureza")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConsenteTratamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contraindicacoes")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CustoPorSessao")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("CustoTotalEstimado")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataExpiracao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataHoraAssinatura")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoTratamento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoEstimadaSessoes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnderecoIPAssinatura")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequenciaSessoes")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("InformadoRiscos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotivoRevogacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NaturezaProcedimento")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OportunidadePerguntas")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersonalizacaoTratamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("PoliticaCancelamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestoesPreocupacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("RiscosEfeitosSecundarios")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoTratamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataExpiracao")
                        .HasDatabaseName("IX_Consentimentos_DataExpiracao");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Consentimentos_Estado");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("IX_Consentimentos_PacienteId");

                    b.HasIndex("TipoTratamento")
                        .HasDatabaseName("IX_Consentimentos_TipoTratamento");

                    b.ToTable("Consentimentos");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Altura")
                        .HasColumnType("decimal(5,1)");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHoraConsulta")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiagnosticoPrincipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiagnosticosSecundarios")
                        .HasColumnType("TEXT");

                    b.Property<int>("DuracaoPrevista")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DuracaoReal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoPagamento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExameFisico")
                        .HasColumnType("TEXT");

                    b.Property<int?>("FrequenciaCardiaca")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HistoriaDoencaAtual")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetodoPagamento")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesInternas")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("PressaoArterial")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prognostico")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProximoSeguimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("QueixaPrincipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RecomendacoesGerais")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisaoSistemas")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Temperatura")
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("TestesAvaliacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoConsulta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TratamentosPrescritos")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DataHoraConsulta")
                        .HasDatabaseName("IX_Consultas_DataHoraConsulta");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_Consultas_Estado");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("IX_Consultas_PacienteId");

                    b.HasIndex("TipoConsulta")
                        .HasDatabaseName("IX_Consultas_TipoConsulta");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AndarFraccao")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Distrito")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAlternativo")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailPrincipal")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Localidade")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuaAvenida")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefoneAlternativo")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonePrincipal")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmailPrincipal")
                        .HasDatabaseName("IX_Contactos_EmailPrincipal");

                    b.HasIndex("PacienteId")
                        .IsUnique()
                        .HasDatabaseName("IX_Contactos_PacienteId");

                    b.ToTable("Contactos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AndarFraccao = "2º Esq",
                            CodigoPostal = "1000-001",
                            Distrito = "Lisboa",
                            EmailPrincipal = "joao.santos@email.com",
                            Localidade = "Lisboa",
                            Numero = "123",
                            PacienteId = 1,
                            RuaAvenida = "Rua das Flores",
                            TelefonePrincipal = "912345678"
                        },
                        new
                        {
                            Id = 2,
                            CodigoPostal = "4000-100",
                            Distrito = "Porto",
                            EmailPrincipal = "maria.costa@email.com",
                            Localidade = "Porto",
                            Numero = "456",
                            PacienteId = 2,
                            RuaAvenida = "Avenida da República",
                            TelefoneAlternativo = "225551234",
                            TelefonePrincipal = "923456789"
                        },
                        new
                        {
                            Id = 3,
                            CodigoPostal = "3000-050",
                            Distrito = "Coimbra",
                            EmailAlternativo = "c.pereira.design@email.com",
                            EmailPrincipal = "carlos.pereira@email.com",
                            Localidade = "Coimbra",
                            Numero = "789",
                            PacienteId = 3,
                            RuaAvenida = "Praça do Comércio",
                            TelefonePrincipal = "934567890"
                        });
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.DeclaracaoSaude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CompreendoImportancia")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ComprometoInformarAlteracoes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConfirmoVeracidade")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ConsumoAguaDiario")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsumoAlcool")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalheAlcool")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalheExercicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalheTabagismo")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoencasHereditarias")
                        .HasColumnType("TEXT");

                    b.Property<string>("EspecificacaoOutrasDoencas")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExercicioFisico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasSono")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedicamentosNaturais")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesAdicionais")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesFamiliares")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualidadeSono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RestricaoesAlimentares")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuplementosAlimentares")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tabagismo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TemAlergias")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemCardiopatias")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemDiabetes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemHipertensao")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TemOutrasDoencas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoDieta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique()
                        .HasDatabaseName("IX_DeclaracoesSaude_PacienteId");

                    b.ToTable("DeclaracoesSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.DocumentoExternoPaciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataDocumento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TamanhoBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoMime")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_DocumentosExternos_Categoria");

                    b.HasIndex("DataDocumento")
                        .HasDatabaseName("IX_DocumentosExternos_DataDocumento");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_DocumentosExternos_IsDeleted");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("IX_DocumentosExternos_PacienteId");

                    b.ToTable("DocumentosExternosPacientes");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.EventoHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoErro")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalhesJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SessaoTerapiaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Severidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessaoTerapiaId")
                        .HasDatabaseName("IX_EventosHardware_SessaoTerapiaId");

                    b.HasIndex("Severidade")
                        .HasDatabaseName("IX_EventosHardware_Severidade");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_EventosHardware_Timestamp");

                    b.HasIndex("TipoEvento")
                        .HasDatabaseName("IX_EventosHardware_TipoEvento");

                    b.ToTable("EventosHardware");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.HistoriaFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CondicaoDoenca")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrauParentesco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdadeDiagnostico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("HistoriaFamiliar");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Hospitalizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DuracaoDias")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hospital")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("Hospitalizacao");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.ImportacaoExcelLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoCompleto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DetalhesJson")
                        .HasColumnType("TEXT");

                    b.Property<double>("DuracaoSegundos")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ImportadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int>("LinhasErros")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinhasOk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinhasWarnings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MensagemErro")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeFicheiro")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sucesso")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalLinhas")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilizadorId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImportadoEm")
                        .HasDatabaseName("IX_ImportacoesExcelLog_ImportadoEm");

                    b.HasIndex("Sucesso")
                        .HasDatabaseName("IX_ImportacoesExcelLog_Sucesso");

                    b.ToTable("ImportacoesExcelLog");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IntoleranciaAlimentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alimento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sintomas")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("IntoleranciaAlimentar");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisAnalise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoImagemDireita")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CaminhoImagemEsquerda")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComparacaoAnaliseAnterior")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfiguracoesLuz")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHoraAnalise")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoSessao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FrequenciaProximaAnalise")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("InterpretacaoGeral")
                        .HasColumnType("TEXT");

                    b.Property<string>("MudancasEstiloVida")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesPorSetorDireita")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesPorSetorEsquerda")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacoesTecnicas")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PontosCriticos")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfissionalAnalise")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("QualidadeImagemDireita")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QualidadeImagemEsquerda")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResolucaoCaptura")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaCirculatorio")
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaDigestivo")
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaGeniturinario")
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaMusculoEsqueletico")
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaNervoso")
                        .HasColumnType("TEXT");

                    b.Property<string>("SistemaRespiratorio")
                        .HasColumnType("TEXT");

                    b.Property<string>("SuplementacaoRecomendada")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TamanhoFicheiroDireita")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TamanhoFicheiroEsquerda")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoEquipamento")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TratamentosSugeridos")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataHoraAnalise")
                        .HasDatabaseName("IX_IrisAnalises_DataHoraAnalise");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("IX_IrisAnalises_PacienteId");

                    b.ToTable("IrisAnalises");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisImagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoImagem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCaptura")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Olho")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("IrisImagens");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisMarca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("IrisImagemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("IrisImagemId");

                    b.ToTable("IrisMarcas");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.LeituraBioenergetica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Canal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FrequenciaDominante")
                        .HasColumnType("REAL");

                    b.Property<double?>("Gsr")
                        .HasColumnType("REAL");

                    b.Property<string>("MetricasAdicionaisJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<double>("Pico")
                        .HasColumnType("REAL");

                    b.Property<double>("PotenciaEspectral")
                        .HasColumnType("REAL");

                    b.Property<double>("Rms")
                        .HasColumnType("REAL");

                    b.Property<int>("SessaoTerapiaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessaoTerapiaId")
                        .HasDatabaseName("IX_LeiturasBioenergeticas_SessaoTerapiaId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_LeiturasBioenergeticas_Timestamp");

                    b.ToTable("LeiturasBioenergeticas");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.MedicamentoAtual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeclaracaoSaudeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DesdeQuando")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dosagem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Frequencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclaracaoSaudeId");

                    b.ToTable("MedicamentoAtual");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataUltimaAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoCivil")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoRegisto")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("LastActiveTab")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nacionalidade")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("NomePreferido")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroProcesso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profissao")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProgressoAbas")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proveniencia")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvenienciaOutro")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TerapiaAtual")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataNascimento")
                        .HasDatabaseName("IX_Pacientes_DataNascimento");

                    b.HasIndex("NomeCompleto")
                        .HasDatabaseName("IX_Pacientes_NomeCompleto");

                    b.HasIndex("NumeroProcesso")
                        .IsUnique()
                        .HasDatabaseName("IX_Pacientes_NumeroProcesso");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCriacao = new DateTime(2025, 9, 13, 13, 39, 37, 581, DateTimeKind.Utc).AddTicks(2912),
                            DataNascimento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstadoCivil = "Casado",
                            EstadoRegisto = "Incompleto",
                            Genero = "Masculino",
                            LastActiveTab = 1,
                            Nacionalidade = "Portuguesa",
                            NomeCompleto = "João Silva Santos",
                            NomePreferido = "João",
                            NumeroProcesso = "PAC-2025-001",
                            Profissao = "Engenheiro Informático"
                        },
                        new
                        {
                            Id = 2,
                            DataCriacao = new DateTime(2025, 9, 28, 13, 39, 37, 581, DateTimeKind.Utc).AddTicks(2923),
                            DataNascimento = new DateTime(1975, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstadoCivil = "Solteira",
                            EstadoRegisto = "Em Progresso",
                            Genero = "Feminino",
                            LastActiveTab = 1,
                            Nacionalidade = "Portuguesa",
                            NomeCompleto = "Maria Fernanda Costa",
                            NomePreferido = "Maria",
                            NumeroProcesso = "PAC-2025-002",
                            Profissao = "Professora",
                            ProgressoAbas = "{\"Aba1\":true,\"Aba2\":true,\"Aba3\":false}"
                        },
                        new
                        {
                            Id = 3,
                            DataCriacao = new DateTime(2025, 10, 6, 13, 39, 37, 581, DateTimeKind.Utc).AddTicks(2926),
                            DataNascimento = new DateTime(1990, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstadoCivil = "União de Facto",
                            EstadoRegisto = "Completo",
                            Genero = "Masculino",
                            LastActiveTab = 1,
                            NIF = "123456789",
                            Nacionalidade = "Portuguesa",
                            NomeCompleto = "Carlos António Pereira",
                            NumeroProcesso = "PAC-2025-003",
                            Profissao = "Designer Gráfico",
                            ProgressoAbas = "{\"Aba1\":true,\"Aba2\":true,\"Aba3\":true,\"Aba4\":true,\"Aba5\":true,\"Aba6\":false}"
                        });
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.PlanoTerapia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("SessaoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm")
                        .HasDatabaseName("IX_PlanosTerapia_CriadoEm");

                    b.HasIndex("Estado")
                        .HasDatabaseName("IX_PlanosTerapia_Estado");

                    b.HasIndex("SessaoId")
                        .HasDatabaseName("IX_PlanosTerapia_SessaoId");

                    b.ToTable("PlanosTerapia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.ProtocoloTerapeutico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AmplitudeV")
                        .HasColumnType("REAL");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contraindicacoes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int>("DuracaoMinPorFrequencia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FormaOnda")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FrequenciasJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("LimiteCorrenteMa")
                        .HasColumnType("REAL");

                    b.Property<string>("Modulacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notas")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_ProtocolosTerapeuticos_Categoria");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProtocolosTerapeuticos_ExternalId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_ProtocolosTerapeuticos_Nome");

                    b.ToTable("ProtocolosTerapeuticos");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Sessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Achados")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Avaliacao")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contexto")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("TEXT");

                    b.Property<int>("DuracaoMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModificadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutrasMedicoes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Peso")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Plano")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PressaoArterial")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Temperatura")
                        .HasPrecision(4, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataHora")
                        .HasDatabaseName("IX_Sessoes_DataHora");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Sessoes_IsDeleted");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("IX_Sessoes_PacienteId");

                    b.ToTable("Sessoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Achados = "Tensão muscular paravertebral L4-L5, trigger points bilateral",
                            Avaliacao = "Lombalgia mecânica aguda",
                            Contexto = "Após esforço físico no ginásio",
                            CriadoEm = new DateTime(2025, 9, 13, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3243),
                            DataHora = new DateTime(2025, 9, 13, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3232),
                            DuracaoMinutos = 60,
                            IsDeleted = false,
                            Motivo = "Dor lombar aguda",
                            PacienteId = 1,
                            Peso = 78.5m,
                            Plano = "HVLA L4-L5 + Protocolo anti-inflamatório + Repouso relativo 3 dias + Reavaliação 1 semana",
                            PressaoArterial = "120/80",
                            Temperatura = 36.5m
                        },
                        new
                        {
                            Id = 2,
                            Achados = "Melhoria 70%, tensão residual L5",
                            Avaliacao = "Evolução favorável",
                            CriadoEm = new DateTime(2025, 9, 20, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3251),
                            DataHora = new DateTime(2025, 9, 20, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3248),
                            DuracaoMinutos = 45,
                            IsDeleted = false,
                            Motivo = "Reavaliação lombalgia",
                            PacienteId = 1,
                            Peso = 78.0m,
                            Plano = "Alongamentos paravertebrais 10' 2x/dia + Manter atividade física moderada",
                            PressaoArterial = "118/78"
                        },
                        new
                        {
                            Id = 3,
                            Achados = "FC: 85 bpm, tensão cervical bilateral",
                            Avaliacao = "Stress ocupacional com somatização",
                            Contexto = "Período de trabalho intenso com deadlines apertados",
                            CriadoEm = new DateTime(2025, 10, 3, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3257),
                            DataHora = new DateTime(2025, 10, 3, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3254),
                            DuracaoMinutos = 60,
                            IsDeleted = false,
                            Motivo = "Consulta de rotina + stress elevado",
                            OutrasMedicoes = "FC: 85 bpm, padrão respiratório superficial",
                            PacienteId = 1,
                            Plano = "Protocolo anti-stress + Meditação 10' diária + Dieta anti-inflamatória + Ómega-3",
                            PressaoArterial = "135/88"
                        },
                        new
                        {
                            Id = 4,
                            Achados = "Trigger points trapézio superior bilateral, C5-C6 com restrição de mobilidade",
                            Avaliacao = "Cefaleia tensional de origem cervical",
                            Contexto = "Cefaleias tensionais há 6 meses, agravamento recente",
                            CriadoEm = new DateTime(2025, 9, 28, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3263),
                            DataHora = new DateTime(2025, 9, 28, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3260),
                            DuracaoMinutos = 90,
                            IsDeleted = false,
                            Motivo = "Avaliação inicial - cefaleias recorrentes",
                            OutrasMedicoes = "FC: 72 bpm",
                            PacienteId = 2,
                            Peso = 62.0m,
                            Plano = "Manipulação C5-C6 + Exercícios posturais + Hidratação 2L/dia + Redução stress + Reavaliação 2 semanas",
                            PressaoArterial = "125/82",
                            Temperatura = 36.3m
                        },
                        new
                        {
                            Id = 5,
                            Achados = "Redução 60% frequência cefaleias, mobilidade cervical normalizada",
                            Avaliacao = "Excelente evolução",
                            CriadoEm = new DateTime(2025, 10, 12, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3269),
                            DataHora = new DateTime(2025, 10, 12, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3267),
                            DuracaoMinutos = 60,
                            IsDeleted = false,
                            Motivo = "Reavaliação cefaleias + análise iridológica",
                            PacienteId = 2,
                            Peso = 61.5m,
                            Plano = "Manter exercícios + Consulta follow-up 1 mês",
                            PressaoArterial = "120/78"
                        },
                        new
                        {
                            Id = 6,
                            Achados = "Edema leve joelho direito, mobilidade ombro esquerdo reduzida 20%, padrão de fadiga adrenal",
                            Avaliacao = "Síndrome inflamatório multifatorial + possível sobrecarga adrenal",
                            Contexto = "Dores articulares múltiplas (joelhos, ombros) + fadiga persistente há 3 meses",
                            CriadoEm = new DateTime(2025, 10, 8, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3275),
                            DataHora = new DateTime(2025, 10, 8, 14, 39, 37, 581, DateTimeKind.Local).AddTicks(3272),
                            DuracaoMinutos = 120,
                            IsDeleted = false,
                            Motivo = "Consulta integrada - dor articular + fadiga crónica",
                            OutrasMedicoes = "FC: 78 bpm, qualidade sono: 5/10",
                            PacienteId = 3,
                            Peso = 85.0m,
                            Plano = "Osteopatia articular + Mesoterapia anti-inflamatória joelhos + Protocolo naturopático (Curcuma + Ómega-3 + Magnésio) + Dieta anti-inflamatória + Eliminar açúcar refinado + Sono 8h/noite + Reavaliação 3 semanas",
                            PressaoArterial = "128/84",
                            Temperatura = 36.4m
                        });
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.SessaoTerapia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoTotalMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FimEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("HardwareUsado")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("ImprovementMedio")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("InicioEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlanoTerapiaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RngSeed")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoRng")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalItensAplicados")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoRng")
                        .HasDatabaseName("IX_SessoesTerapia_TipoRng");

                    b.HasIndex("PlanoTerapiaId", "InicioEm")
                        .HasDatabaseName("IX_SessoesTerapia_PlanoId_Inicio");

                    b.ToTable("SessoesTerapia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.TemplateGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataAdicao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisponivelEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_TemplatesGlobais_Categoria");

                    b.HasIndex("DisponivelEmail")
                        .HasDatabaseName("IX_TemplatesGlobais_DisponivelEmail");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_TemplatesGlobais_IsDeleted");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_TemplatesGlobais_Nome");

                    b.HasIndex("Tipo")
                        .HasDatabaseName("IX_TemplatesGlobais_Tipo");

                    b.ToTable("TemplatesGlobais");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Terapia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AlvoMelhoria")
                        .HasColumnType("REAL");

                    b.Property<bool>("Aplicado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AplicadoEm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ImprovementPercent")
                        .HasColumnType("REAL");

                    b.Property<string>("NotasAplicacao")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordem")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlanoTerapiaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProtocoloTerapeuticoId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ValuePercent")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Ordem")
                        .HasDatabaseName("IX_Terapias_Ordem");

                    b.HasIndex("PlanoTerapiaId")
                        .HasDatabaseName("IX_Terapias_PlanoTerapiaId");

                    b.HasIndex("ProtocoloTerapeuticoId")
                        .HasDatabaseName("IX_Terapias_ProtocoloTerapeuticoId");

                    b.ToTable("Terapias");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AbordagemSessao", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Sessao", "Sessao")
                        .WithMany("Abordagens")
                        .HasForeignKey("SessaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sessao");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaAlimentar", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("AlergiasAlimentares")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaAmbiental", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("AlergiasAmbientais")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AlergiaMedicamentosa", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("AlergiasMedicamentosas")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.AnexoComunicacao", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Comunicacao", "Comunicacao")
                        .WithMany("Anexos")
                        .HasForeignKey("ComunicacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comunicacao");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Cirurgia", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("Cirurgias")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Comunicacao", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Consentimento", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Consentimentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Contacto", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithOne("Contacto")
                        .HasForeignKey("BioDesk.Domain.Entities.Contacto", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.DeclaracaoSaude", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithOne("DeclaracaoSaude")
                        .HasForeignKey("BioDesk.Domain.Entities.DeclaracaoSaude", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.DocumentoExternoPaciente", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.EventoHardware", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.SessaoTerapia", "SessaoTerapia")
                        .WithMany("EventosHardware")
                        .HasForeignKey("SessaoTerapiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessaoTerapia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.HistoriaFamiliar", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("HistoriaFamiliar")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Hospitalizacao", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("Hospitalizacoes")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IntoleranciaAlimentar", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("IntoleranciasAlimentares")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisAnalise", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany("IrisAnalises")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisImagem", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisMarca", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.IrisImagem", "IrisImagem")
                        .WithMany("Marcas")
                        .HasForeignKey("IrisImagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IrisImagem");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.LeituraBioenergetica", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.SessaoTerapia", "SessaoTerapia")
                        .WithMany("Leituras")
                        .HasForeignKey("SessaoTerapiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessaoTerapia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.MedicamentoAtual", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.DeclaracaoSaude", "DeclaracaoSaude")
                        .WithMany("MedicamentosAtuais")
                        .HasForeignKey("DeclaracaoSaudeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeclaracaoSaude");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.PlanoTerapia", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Sessao", "Sessao")
                        .WithMany()
                        .HasForeignKey("SessaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sessao");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Sessao", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.SessaoTerapia", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.PlanoTerapia", "PlanoTerapia")
                        .WithMany("SessoesTerapia")
                        .HasForeignKey("PlanoTerapiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanoTerapia");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Terapia", b =>
                {
                    b.HasOne("BioDesk.Domain.Entities.PlanoTerapia", "PlanoTerapia")
                        .WithMany("Terapias")
                        .HasForeignKey("PlanoTerapiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDesk.Domain.Entities.ProtocoloTerapeutico", "ProtocoloTerapeutico")
                        .WithMany("Terapias")
                        .HasForeignKey("ProtocoloTerapeuticoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlanoTerapia");

                    b.Navigation("ProtocoloTerapeutico");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Comunicacao", b =>
                {
                    b.Navigation("Anexos");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.DeclaracaoSaude", b =>
                {
                    b.Navigation("AlergiasAlimentares");

                    b.Navigation("AlergiasAmbientais");

                    b.Navigation("AlergiasMedicamentosas");

                    b.Navigation("Cirurgias");

                    b.Navigation("HistoriaFamiliar");

                    b.Navigation("Hospitalizacoes");

                    b.Navigation("IntoleranciasAlimentares");

                    b.Navigation("MedicamentosAtuais");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.IrisImagem", b =>
                {
                    b.Navigation("Marcas");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Consentimentos");

                    b.Navigation("Consultas");

                    b.Navigation("Contacto");

                    b.Navigation("DeclaracaoSaude");

                    b.Navigation("IrisAnalises");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.PlanoTerapia", b =>
                {
                    b.Navigation("SessoesTerapia");

                    b.Navigation("Terapias");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.ProtocoloTerapeutico", b =>
                {
                    b.Navigation("Terapias");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.Sessao", b =>
                {
                    b.Navigation("Abordagens");
                });

            modelBuilder.Entity("BioDesk.Domain.Entities.SessaoTerapia", b =>
                {
                    b.Navigation("EventosHardware");

                    b.Navigation("Leituras");
                });
#pragma warning restore 612, 618
        }
    }
}
