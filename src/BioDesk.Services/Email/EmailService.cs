using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mail;
using System.Threading.Tasks;
using BioDesk.Data;
using BioDesk.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

namespace BioDesk.Services.Email;

/// <summary>
/// Implementa√ß√£o do servi√ßo de email com suporte offline e retry autom√°tico
/// SINGLETON - Usa IServiceProvider para resolver BioDeskDbContext (scoped)
/// </summary>
public class EmailService : IEmailService
{
    private readonly IServiceProvider _serviceProvider;
    private readonly IConfiguration _configuration;
    private readonly ILogger<EmailService> _logger;

    // Configura√ß√µes SMTP din√¢micas (lidas do IConfiguration/User Secrets)
    private string SmtpHost => "smtp.gmail.com";
    private int SmtpPort => 587;
    private string SmtpUsername => _configuration["Email:Sender"] ?? throw new InvalidOperationException("Email:Sender n√£o configurado. Use o bot√£o Configura√ß√µes.");
    private string SmtpPassword => _configuration["Email:Password"] ?? throw new InvalidOperationException("Email:Password n√£o configurado. Use o bot√£o Configura√ß√µes.");
    private string FromEmail => _configuration["Email:Sender"] ?? throw new InvalidOperationException("Email:Sender n√£o configurado.");
    private string FromName => _configuration["Email:SenderName"] ?? "BioDeskPro - Terapias Naturais";

    public EmailService(IServiceProvider serviceProvider, IConfiguration configuration, ILogger<EmailService> logger)
    {
        _serviceProvider = serviceProvider;
        _configuration = configuration;
        _logger = logger;
    }

    /// <summary>
    /// Verifica se tem conex√£o com internet
    /// </summary>
    public bool TemConexao
    {
        get
        {
            try
            {
                using var client = new HttpClient { Timeout = TimeSpan.FromSeconds(5) };
                var response = client.GetAsync("https://www.google.com").Result;
                return response.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
    }

    /// <summary>
    /// ‚ö° CORRE√á√ÉO CR√çTICA: Envia email IMEDIATAMENTE ou falha com exce√ß√£o clara
    /// N√ÉO silencia erros - se falhar, LAN√áA EXCE√á√ÉO para ViewModel tratar
    /// </summary>
    public async Task<EmailResult> EnviarAsync(EmailMessage message)
    {
        _logger.LogInformation("üìß Tentando enviar email IMEDIATO para {To}: {Subject}", message.To, message.Subject);

        // ‚ö†Ô∏è Verificar conex√£o
        if (!TemConexao)
        {
            _logger.LogWarning("‚ö†Ô∏è Sem conex√£o com internet.");
            return new EmailResult
            {
                Sucesso = false,
                AdicionadoNaFila = true,
                Mensagem = "Sem conex√£o √† internet. Email ficar√° agendado para envio autom√°tico."
            };
        }

        // ‚ö° Tentar enviar IMEDIATAMENTE
        try
        {
            await EnviarViaSMTPAsync(message);
            _logger.LogInformation("‚úÖ Email enviado IMEDIATAMENTE para {To}", message.To);

            return new EmailResult
            {
                Sucesso = true,
                Mensagem = "‚úÖ Email enviado com sucesso!"
            };
        }
        catch (Exception ex)
        {
            // ‚ùå CR√çTICO: N√ÉO SILENCIAR - Lan√ßar exce√ß√£o para ViewModel saber que falhou
            _logger.LogError(ex, "‚ùå ERRO ao enviar email para {To}: {Message}", message.To, ex.Message);

            // Retornar falha COM mensagem clara
            return new EmailResult
            {
                Sucesso = false,
                AdicionadoNaFila = false, // ‚ö†Ô∏è N√ÉO foi adicionado √† fila - est√° na BD como Agendado
                Mensagem = $"‚ùå Erro ao enviar: {ex.Message}"
            };
        }
    }

    /// <summary>
    /// Processa fila de mensagens pendentes
    /// </summary>
    public async Task ProcessarFilaAsync()
    {
        _logger.LogWarning("üîç [ProcessarFila] INICIANDO verifica√ß√£o...");

        if (!TemConexao)
        {
            _logger.LogWarning("‚ö†Ô∏è [ProcessarFila] Sem conex√£o. Fila n√£o processada.");
            return;
        }

        _logger.LogWarning("‚úÖ [ProcessarFila] Conex√£o OK. Buscando emails agendados...");

        // ‚úÖ Criar scope para resolver DbContext
        using var scope = _serviceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<BioDeskDbContext>();

        // Buscar mensagens na fila (n√£o enviadas, com tentativas < 3, e pr√≥xima tentativa <= agora)
        var mensagensNaFila = await dbContext.Comunicacoes
            .Where(c => !c.IsEnviado
                && c.Status == StatusComunicacao.Agendado
                && c.TentativasEnvio < 3
                && (!c.ProximaTentativa.HasValue || c.ProximaTentativa.Value <= DateTime.Now))
            .Include(c => c.Anexos)
            .ToListAsync();

        _logger.LogWarning("üì¨ [ProcessarFila] Encontrei {Count} mensagens na fila", mensagensNaFila.Count);

        foreach (var msg in mensagensNaFila)
        {
            _logger.LogWarning("  ‚Üí Email ID {Id}: {Assunto} (Tentativas: {Tentativas})",
                msg.Id, msg.Assunto, msg.TentativasEnvio);
        }

        foreach (var comunicacao in mensagensNaFila)
        {
            _logger.LogWarning("üîß [ProcessarFila] Tentando enviar Email ID {Id}...", comunicacao.Id);

            try
            {
                // Criar EmailMessage
                var emailMessage = new EmailMessage
                {
                    To = comunicacao.Destinatario,
                    Subject = comunicacao.Assunto ?? "Mensagem da Cl√≠nica",
                    Body = comunicacao.Corpo,
                    IsHtml = true,
                    Attachments = comunicacao.Anexos.Select(a => a.CaminhoArquivo).ToList()
                };

                _logger.LogWarning("üìß [ProcessarFila] Enviando via SMTP para {To}...", comunicacao.Destinatario);

                // Tentar enviar
                await EnviarViaSMTPAsync(emailMessage);

                // ‚úÖ SUCESSO ‚Üí Atualizar status
                _logger.LogWarning("‚úÖ [ProcessarFila] SMTP OK! Atualizando status do Email ID {Id}...", comunicacao.Id);
                _logger.LogWarning("   ANTES: IsEnviado={IsEnviado}, Status={Status}, Tentativas={Tentativas}",
                    comunicacao.IsEnviado, comunicacao.Status, comunicacao.TentativasEnvio);

                comunicacao.IsEnviado = true;
                comunicacao.Status = StatusComunicacao.Enviado;
                comunicacao.DataEnvio = DateTime.Now;
                comunicacao.UltimoErro = null;
                // ‚ö†Ô∏è N√ÉO resetar TentativasEnvio - manter hist√≥rico

                _logger.LogWarning("   DEPOIS: IsEnviado={IsEnviado}, Status={Status}, DataEnvio={DataEnvio}",
                    comunicacao.IsEnviado, comunicacao.Status, comunicacao.DataEnvio);
                _logger.LogWarning("‚úÖ [ProcessarFila] Email ID {Id} enviado com SUCESSO!", comunicacao.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError("‚ùå [ProcessarFila] ERRO ao enviar Email ID {Id}: {Error}", comunicacao.Id, ex.Message);
                _logger.LogError("Stack: {Stack}", ex.StackTrace);

                // Falhou ‚Üí Incrementar tentativas e agendar pr√≥xima tentativa
                comunicacao.TentativasEnvio++;
                comunicacao.UltimoErro = ex.Message;
                comunicacao.ProximaTentativa = DateTime.Now.AddMinutes(5 * comunicacao.TentativasEnvio); // Backoff exponencial

                if (comunicacao.TentativasEnvio >= 3)
                {
                    comunicacao.Status = StatusComunicacao.Falhado;
                    _logger.LogError("‚ùå Email ID {Id} marcado como FALHADO (3 tentativas)", comunicacao.Id);
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è Email ID {Id}: Tentativa {Tentativa}/3. Pr√≥ximo retry: {ProximaTentativa}",
                        comunicacao.Id, comunicacao.TentativasEnvio, comunicacao.ProximaTentativa);
                }
            }

            _logger.LogWarning("üíæ [ProcessarFila] Salvando altera√ß√µes para Email ID {Id}...", comunicacao.Id);

            // ‚ö†Ô∏è CRITICAL: Verificar estado antes de salvar
            var entry = dbContext.Entry(comunicacao);
            _logger.LogWarning("   Estado EF: {State}, IsEnviado={IsEnviado}, Status={Status}",
                entry.State, comunicacao.IsEnviado, comunicacao.Status);

            await dbContext.SaveChangesAsync();
            _logger.LogWarning("‚úÖ [ProcessarFila] Email ID {Id} salvo na BD", comunicacao.Id);
        }

        _logger.LogInformation("‚úÖ Processamento de fila conclu√≠do");
    }

    /// <summary>
    /// Retorna n√∫mero de mensagens na fila
    /// </summary>
    public async Task<int> ContarMensagensNaFilaAsync()
    {
        // ‚úÖ Criar scope para resolver DbContext
        using var scope = _serviceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<BioDeskDbContext>();

        return await dbContext.Comunicacoes
            .CountAsync(c => !c.IsEnviado && c.Status == StatusComunicacao.Agendado);
    }

    /// <summary>
    /// Testa conex√£o SMTP com credenciais fornecidas (usado no bot√£o Testar Conex√£o)
    /// N√ÉO grava na BD, apenas testa envio real
    /// </summary>
    public async Task<EmailResult> TestarConexaoAsync(string smtpUsername, string smtpPassword, string fromEmail, string fromName)
    {
        try
        {
            _logger.LogInformation("üîç Testando conex√£o SMTP com {Email}...", smtpUsername);

            // Criar email de teste
            var emailTeste = $@"
                <html>
                <body style='font-family: Arial, sans-serif; padding: 20px;'>
                    <h2 style='color: #059669;'>‚úÖ Configura√ß√£o de Email Bem-Sucedida!</h2>
                    <p>Parab√©ns! O seu sistema de email do <strong>BioDeskPro</strong> est√° configurado corretamente.</p>
                    <hr style='border: 1px solid #E3E9DE; margin: 20px 0;'/>
                    <p><strong>Detalhes da Configura√ß√£o:</strong></p>
                    <ul>
                        <li><strong>Remetente:</strong> {smtpUsername}</li>
                        <li><strong>Nome:</strong> {fromName}</li>
                        <li><strong>Data do Teste:</strong> {DateTime.Now:dd/MM/yyyy HH:mm:ss}</li>
                    </ul>
                    <p style='color: #6B7280; font-size: 12px; margin-top: 30px;'>
                        Este √© um email de teste autom√°tico do BioDeskPro.<br/>
                        Se recebeu esta mensagem, significa que est√° tudo a funcionar perfeitamente! üéâ
                    </p>
                </body>
                </html>";

            // Enviar email de teste diretamente via SMTP (sem gravar na BD)
            using var smtpClient = new SmtpClient(SmtpHost, SmtpPort)
            {
                Credentials = new NetworkCredential(smtpUsername, smtpPassword),
                EnableSsl = true,
                Timeout = 30000 // 30 segundos
            };

            using var mailMessage = new MailMessage
            {
                From = new MailAddress(fromEmail, fromName),
                Subject = "‚úÖ Teste de Configura√ß√£o - BioDeskPro",
                Body = emailTeste,
                IsBodyHtml = true
            };

            mailMessage.To.Add(new MailAddress(smtpUsername, fromName)); // Envia para si pr√≥prio

            await smtpClient.SendMailAsync(mailMessage);

            _logger.LogInformation("‚úÖ Email de teste enviado com sucesso!");
            return new EmailResult
            {
                Sucesso = true,
                Mensagem = $"‚úÖ Email de teste enviado com sucesso para {smtpUsername}!"
            };
        }
        catch (SmtpException smtpEx)
        {
            _logger.LogError(smtpEx, "‚ùå Erro SMTP ao testar conex√£o");

            var mensagemErro = smtpEx.StatusCode switch
            {
                SmtpStatusCode.MailboxUnavailable => "Email inv√°lido ou n√£o encontrado.",
                SmtpStatusCode.MailboxBusy => "Caixa de email ocupada. Tente novamente.",
                SmtpStatusCode.GeneralFailure => "Falha geral no servidor SMTP. Verifique credenciais.",
                _ => $"Erro SMTP ({smtpEx.StatusCode}): {smtpEx.Message}"
            };

            return new EmailResult
            {
                Sucesso = false,
                Mensagem = $"‚ùå Falha ao enviar: {mensagemErro}\n\nVerifique:\n‚Ä¢ App Password correto\n‚Ä¢ Email √© Gmail\n‚Ä¢ Conex√£o √† internet"
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro inesperado ao testar conex√£o");
            return new EmailResult
            {
                Sucesso = false,
                Mensagem = $"‚ùå Erro ao testar: {ex.Message}"
            };
        }
    }

    /// <summary>
    /// Envia email via SMTP
    /// </summary>
    private async Task EnviarViaSMTPAsync(EmailMessage message)
    {
        using var smtpClient = new SmtpClient(SmtpHost, SmtpPort)
        {
            Credentials = new NetworkCredential(SmtpUsername, SmtpPassword),
            EnableSsl = true
        };

        using var mailMessage = new MailMessage
        {
            From = new MailAddress(FromEmail, FromName),
            Subject = message.Subject,
            Body = message.Body,
            IsBodyHtml = message.IsHtml
        };

        mailMessage.To.Add(new MailAddress(message.To, message.ToName ?? string.Empty));

        // Adicionar anexos
        foreach (var attachmentPath in message.Attachments)
        {
            if (System.IO.File.Exists(attachmentPath))
            {
                var attachment = new Attachment(attachmentPath);
                mailMessage.Attachments.Add(attachment);
            }
            else
            {
                _logger.LogWarning("‚ö†Ô∏è Anexo n√£o encontrado: {Path}", attachmentPath);
            }
        }

        await smtpClient.SendMailAsync(mailMessage);
    }
}
