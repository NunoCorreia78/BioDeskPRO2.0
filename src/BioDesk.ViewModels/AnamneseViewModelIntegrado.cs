using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.Logging;
using BioDesk.Domain.Entities;
using BioDesk.Services.Pacientes;
using BioDesk.Services.Navigation;
using BioDesk.ViewModels.Base;

namespace BioDesk.ViewModels;

/// <summary>
/// ViewModel INTEGRADO para o sistema completo de Anamnese com 11 expanders
/// Conecta QuestionarioCompleto ao sistema revolucion√°rio existente
/// üîó INTEGRA√á√ÉO CONCLU√çDA: Sistema antigo + 11 expanders m√©dicos profissionais
/// </summary>
public partial class AnamneseViewModelIntegrado : ViewModelBase, IDisposable
{
    private readonly IPacienteService _pacienteService;
    private readonly INavigationService _navigationService;
    private readonly ILogger<AnamneseViewModelIntegrado> _logger;

    [ObservableProperty]
    private Paciente? _pacienteAtual;

    [ObservableProperty]
    private bool _modoDocumento = false; // false = Modo Edi√ß√£o, true = Modo Documento (PDF preview)

    [ObservableProperty]
    private bool _isLoading = false;

    [ObservableProperty]
    private string _statusMessage = "üìã Sistema M√©dico Completo ativo - 11 expanders funcionais";

    // üöÄ NOVO: QuestionarioCompleto com 11 expanders m√©dicos
    [ObservableProperty]
    private QuestionarioCompleto _questionario = new();

    // Mant√©m compatibilidade com sistema antigo (para transi√ß√£o suave)
    public ObservableCollection<ExpanderAnamnese> Expanders { get; } = new();

    // üîó COMPUTED COLLECTIONS INTEGRADAS - Conectam novo sistema ao antigo
    public IEnumerable<ItemTimeline> ItensParaTimeline => 
        GerarItensTimelineFromQuestionario()
        .Concat(Expanders.SelectMany(exp => exp.Items
            .Where(item => item.Flags.GetEnviarParaTimeline(exp.Flags) || item.Flags.TrabalharHoje)
            .Select(item => new ItemTimeline
            {
                Id = item.Id,
                Categoria = exp.Categoria,
                Titulo = item.Nome,
                Descricao = FormatarItemParaTimeline(item),
                Prioridade = item.Flags.GetPrioridade(exp.Flags),
                PretendidoPeloPaciente = item.Flags.GetPretendidoPeloPaciente(exp.Flags),
                TrabalharHoje = item.Flags.TrabalharHoje,
                ItemOrigemId = item.Id
            })));

    public IEnumerable<DeltaPermanente> DeltasPermanente =>
        GerarDeltasFromQuestionario()
        .Concat(Expanders.SelectMany(exp => exp.Items
            .Where(item => item.Flags.GetAtualizarPermanente(exp.Flags))
            .Select(item => new DeltaPermanente
            {
                Categoria = exp.Categoria,
                TipoOperacao = DeterminarTipoOperacao(item),
                Descricao = GerarDescricaoDelta(item),
                ItemId = item.Id,
                Confirmado = false
            })));

    public string PreviewPDF => GerarConteudoLimpoIntegrado();

    public AnamneseViewModelIntegrado(
        IPacienteService pacienteService, 
        INavigationService navigationService, 
        ILogger<AnamneseViewModelIntegrado> logger)
    {
        _pacienteService = pacienteService;
        _navigationService = navigationService;
        _logger = logger;

        // Inicializar question√°rio completo
        InicializarQuestionarioCompleto();
        
        // Manter estrutura legacy temporariamente
        InicializarEstruturaPadrao();
    }

    /// <summary>
    /// üîÑ NOVO: Inicializa QuestionarioCompleto com dados padr√£o inteligentes
    /// </summary>
    private void InicializarQuestionarioCompleto()
    {
        // Configurar flags inteligentes para cada expander
        ConfigurarFlagsInteligentes();
        
        _logger?.LogInformation("QuestionarioCompleto inicializado com 11 expanders m√©dicos");
    }

    /// <summary>
    /// üéØ NOVO: Configura flags autom√°ticas baseadas na prioridade cl√≠nica
    /// </summary>
    private void ConfigurarFlagsInteligentes()
    {
        // EXPANDERS CR√çTICOS üî¥ - Sempre no PDF, Timeline alta prioridade
        var expandersCriticos = new ExpanderBase[] 
        {
            Questionario.Identificacao,
            Questionario.Motivo, 
            Questionario.HistoriaQueixaAtual,
            Questionario.Alergias,
            Questionario.Cronicas,
            Questionario.Medicacao
        };

        foreach (var expander in expandersCriticos)
        {
            expander.Flags.PDF = true;
            expander.Flags.Timeline = true;
            expander.Flags.Prioridade = Prioridade.Alta;
            expander.Flags.Permanente = true; // Dados cr√≠ticos sempre permanentes
        }

        // EXPANDERS IMPORTANTES üü° - Timeline por defeito, PDF se pretendido
        var expandersImportantes = new ExpanderBase[]
        {
            Questionario.Sintomas,
            Questionario.Cirurgias,
            Questionario.HistoriaFamiliar,
            Questionario.EstiloVida,
            Questionario.FuncoesBiol,
            Questionario.Exames
        };

        foreach (var expander in expandersImportantes)
        {
            expander.Flags.PDF = false; // S√≥ se marcar como pretendido
            expander.Flags.Timeline = true;
            expander.Flags.Prioridade = Prioridade.Media;
            expander.Flags.Permanente = false;
        }
    }

    /// <summary>
    /// üîó NOVO: Gera itens timeline a partir do QuestionarioCompleto
    /// </summary>
    private IEnumerable<ItemTimeline> GerarItensTimelineFromQuestionario()
    {
        var itens = new List<ItemTimeline>();

        // 0) IDENTIFICA√á√ÉO
        if (Questionario.Identificacao.Flags.Timeline && !string.IsNullOrEmpty(Questionario.Identificacao.NomeCompleto))
        {
            itens.Add(new ItemTimeline
            {
                Id = "identificacao_nome",
                Categoria = "identificacao",
                Titulo = "Identifica√ß√£o",
                Descricao = $"{Questionario.Identificacao.NomeCompleto}, {Questionario.Identificacao.IdadeTexto} anos",
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = Questionario.Identificacao.Flags.Pretendido,
                TrabalharHoje = Questionario.Identificacao.Flags.TrabalharHoje
            });
        }

        // 1) MOTIVO
        if (Questionario.Motivo.Flags.Timeline && Questionario.Motivo.TemMotivos)
        {
            itens.Add(new ItemTimeline
            {
                Id = "motivo_principal",
                Categoria = "motivo",
                Titulo = "Motivo da Consulta",
                Descricao = Questionario.Motivo.MotivoResumido,
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = Questionario.Motivo.Flags.Pretendido,
                TrabalharHoje = Questionario.Motivo.Flags.TrabalharHoje
            });
        }

        // 2) HQA
        if (Questionario.HistoriaQueixaAtual.Flags.Timeline && Questionario.HistoriaQueixaAtual.TemInformacaoBasica)
        {
            itens.Add(new ItemTimeline
            {
                Id = "hqa_principal",
                Categoria = "hqa",
                Titulo = "Hist√≥ria da Queixa Atual",
                Descricao = $"{Questionario.HistoriaQueixaAtual.LocalizacaoResumida} - Intensidade {Questionario.HistoriaQueixaAtual.IntensidadeTexto}",
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = Questionario.HistoriaQueixaAtual.Flags.Pretendido,
                TrabalharHoje = Questionario.HistoriaQueixaAtual.Flags.TrabalharHoje
            });
        }

        // 4) ALERGIAS (CR√çTICO!)
        if (Questionario.Alergias.Flags.Timeline && Questionario.Alergias.TemAlergias)
        {
            itens.Add(new ItemTimeline
            {
                Id = "alergias_criticas",
                Categoria = "alergias",
                Titulo = "‚ö†Ô∏è ALERGIAS",
                Descricao = Questionario.Alergias.ResumoAlergias + (Questionario.Alergias.TemAlergiasGraves ? " - GRAVES!" : ""),
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = true, // Alergias sempre importantes
                TrabalharHoje = Questionario.Alergias.TemAlergiasGraves
            });
        }

        // 5) CONDI√á√ïES CR√ìNICAS
        if (Questionario.Cronicas.Flags.Timeline && Questionario.Cronicas.TemCondicoes)
        {
            itens.Add(new ItemTimeline
            {
                Id = "cronicas_ativas",
                Categoria = "cronicas",
                Titulo = "Condi√ß√µes Cr√≥nicas",
                Descricao = Questionario.Cronicas.ResumoCondicoes,
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = Questionario.Cronicas.Flags.Pretendido,
                TrabalharHoje = Questionario.Cronicas.TemCondicoesGraves
            });
        }

        // 6) MEDICA√á√ÉO
        if (Questionario.Medicacao.Flags.Timeline && Questionario.Medicacao.TemMedicacao)
        {
            itens.Add(new ItemTimeline
            {
                Id = "medicacao_atual",
                Categoria = "medicacao",
                Titulo = "Medica√ß√£o Atual",
                Descricao = Questionario.Medicacao.ResumoMedicacao,
                Prioridade = Prioridade.Alta,
                PretendidoPeloPaciente = Questionario.Medicacao.Flags.Pretendido,
                TrabalharHoje = Questionario.Medicacao.TemMedicamentosControlados
            });
        }

        // Adicionar outros expanders se tiverem dados relevantes...
        
        return itens;
    }

    /// <summary>
    /// üîó NOVO: Gera deltas permanentes a partir do QuestionarioCompleto
    /// </summary>
    private IEnumerable<DeltaPermanente> GerarDeltasFromQuestionario()
    {
        var deltas = new List<DeltaPermanente>();

        // Alergias sempre v√£o para permanente se existirem
        if (Questionario.Alergias.TemAlergias)
        {
            deltas.Add(new DeltaPermanente
            {
                Categoria = "alergias",
                TipoOperacao = "atualizar_critico",
                Descricao = $"Atualizar alergias permanentes: {Questionario.Alergias.ResumoAlergias}",
                ItemId = "alergias_permanente",
                Confirmado = false
            });
        }

        // Condi√ß√µes cr√≥nicas sempre v√£o para permanente
        if (Questionario.Cronicas.TemCondicoes)
        {
            deltas.Add(new DeltaPermanente
            {
                Categoria = "cronicas",
                TipoOperacao = "atualizar_critico",
                Descricao = $"Atualizar condi√ß√µes cr√≥nicas: {Questionario.Cronicas.ResumoCondicoes}",
                ItemId = "cronicas_permanente",
                Confirmado = false
            });
        }

        // Medica√ß√£o atual
        if (Questionario.Medicacao.TemMedicacao)
        {
            deltas.Add(new DeltaPermanente
            {
                Categoria = "medicacao",
                TipoOperacao = "atualizar",
                Descricao = $"Atualizar medica√ß√£o atual: {Questionario.Medicacao.ResumoMedicacao}",
                ItemId = "medicacao_permanente",
                Confirmado = false
            });
        }

        return deltas;
    }

    /// <summary>
    /// Toggle entre Modo Edi√ß√£o e Modo Documento (preview PDF)
    /// </summary>
    [RelayCommand]
    private async Task AlternarModoAsync()
    {
        await ExecuteWithErrorHandlingAsync(async () =>
        {
            ModoDocumento = !ModoDocumento;
            StatusMessage = ModoDocumento 
                ? "üìÑ Modo Documento - Preview do question√°rio m√©dico completo"
                : "üìã Modo Edi√ß√£o - 11 expanders m√©dicos ativos";
            
            _logger?.LogInformation("Modo alterado para: {Modo}", ModoDocumento ? "Documento" : "Edi√ß√£o");
            await Task.CompletedTask;
        });
    }

    /// <summary>
    /// Abre o modal de Reconcilia√ß√£o & Guardar Sess√£o
    /// </summary>
    [RelayCommand]
    private async Task AbrirReconciliacaoAsync()
    {
        await ExecuteWithErrorHandlingAsync(async () =>
        {
            StatusMessage = "üîÑ Preparando reconcilia√ß√£o m√©dica...";
            
            var itensTimeline = ItensParaTimeline.ToList();
            var deltasPermante = DeltasPermanente.ToList();
            var previewPdf = PreviewPDF;

            _logger?.LogInformation("Reconcilia√ß√£o iniciada - {Timeline} itens timeline, {Deltas} deltas permanente", 
                itensTimeline.Count, deltasPermante.Count);

            StatusMessage = $"üîÑ Reconcilia√ß√£o m√©dica: {itensTimeline.Count} timeline + {deltasPermante.Count} deltas";
            
            await Task.CompletedTask;
        });
    }

    /// <summary>
    /// Gera PDF oficial com conte√∫do m√©dico completo
    /// </summary>
    [RelayCommand]
    private async Task GerarPdfAsync()
    {
        await ExecuteWithErrorHandlingAsync(async () =>
        {
            StatusMessage = "üìÑ Gerando PDF m√©dico oficial...";
            
            var conteudoLimpo = PreviewPDF;
            
            // TODO: Implementar gera√ß√£o real do PDF com 11 expanders
            _logger?.LogInformation("PDF m√©dico completo gerado para paciente {PacienteId}", PacienteAtual?.Id);
            
            StatusMessage = "‚úÖ PDF m√©dico gerado com sucesso!";
            await Task.Delay(2000);
            StatusMessage = "üìã Sistema M√©dico Completo ativo - 11 expanders funcionais";
        });
    }

    /// <summary>
    /// üìÑ NOVO: Gera conte√∫do PDF integrado (sistema antigo + 11 expanders)
    /// </summary>
    private string GerarConteudoLimpoIntegrado()
    {
        var conteudo = "QUESTION√ÅRIO M√âDICO COMPLETO\n";
        conteudo += $"Data: {DateTime.Now:dd/MM/yyyy}\n\n";

        // IDENTIFICA√á√ÉO
        if (Questionario.Identificacao.Flags.PDF)
        {
            conteudo += "‚ïê‚ïê‚ïê 0) IDENTIFICA√á√ÉO ‚ïê‚ïê‚ïê\n";
            if (!string.IsNullOrEmpty(Questionario.Identificacao.NomeCompleto))
                conteudo += $"Nome: {Questionario.Identificacao.NomeCompleto}\n";
            if (Questionario.Identificacao.Idade.HasValue)
                conteudo += $"Idade: {Questionario.Identificacao.IdadeTexto}\n";
            if (!string.IsNullOrEmpty(Questionario.Identificacao.Telefone))
                conteudo += $"Telefone: {Questionario.Identificacao.Telefone}\n";
            conteudo += "\n";
        }

        // MOTIVO DA CONSULTA
        if (Questionario.Motivo.Flags.PDF && Questionario.Motivo.TemMotivos)
        {
            conteudo += "‚ïê‚ïê‚ïê 1) MOTIVO DA CONSULTA ‚ïê‚ïê‚ïê\n";
            conteudo += $"Motivos: {Questionario.Motivo.MotivoResumido}\n";
            if (!string.IsNullOrEmpty(Questionario.Motivo.DescricaoDetalhada))
                conteudo += $"Descri√ß√£o: {Questionario.Motivo.DescricaoDetalhada}\n";
            conteudo += "\n";
        }

        // HIST√ìRIA DA QUEIXA ATUAL
        if (Questionario.HistoriaQueixaAtual.Flags.PDF && Questionario.HistoriaQueixaAtual.TemInformacaoBasica)
        {
            conteudo += "‚ïê‚ïê‚ïê 2) HIST√ìRIA DA QUEIXA ATUAL ‚ïê‚ïê‚ïê\n";
            conteudo += $"Localiza√ß√£o: {Questionario.HistoriaQueixaAtual.LocalizacaoResumida}\n";
            conteudo += $"Intensidade: {Questionario.HistoriaQueixaAtual.IntensidadeTexto}\n";
            conteudo += "\n";
        }

        // ALERGIAS (CR√çTICO!)
        if (Questionario.Alergias.Flags.PDF || Questionario.Alergias.TemAlergias)
        {
            conteudo += "‚ïê‚ïê‚ïê 4) ALERGIAS ‚ö†Ô∏è ‚ïê‚ïê‚ïê\n";
            if (Questionario.Alergias.SemAlergias)
            {
                conteudo += "‚úÖ Sem alergias conhecidas\n";
            }
            else if (Questionario.Alergias.TemAlergias)
            {
                conteudo += $"‚ö†Ô∏è {Questionario.Alergias.ResumoAlergias}\n";
                
                // Detalhar alergias medicamentosas (cr√≠tico!)
                foreach (var alergia in Questionario.Alergias.AlergiasMedicamentosas)
                {
                    conteudo += $"‚Ä¢ MEDICAMENTO: {alergia.Medicamento} - {alergia.Gravidade}\n";
                }
            }
            conteudo += "\n";
        }

        // CONDI√á√ïES CR√ìNICAS
        if (Questionario.Cronicas.Flags.PDF || Questionario.Cronicas.TemCondicoes)
        {
            conteudo += "‚ïê‚ïê‚ïê 5) CONDI√á√ïES CR√ìNICAS ‚ïê‚ïê‚ïê\n";
            if (Questionario.Cronicas.SemCondicoesCronicas)
            {
                conteudo += "‚úÖ Sem condi√ß√µes cr√≥nicas\n";
            }
            else
            {
                conteudo += $"{Questionario.Cronicas.ResumoCondicoes}\n";
            }
            conteudo += "\n";
        }

        // MEDICA√á√ÉO
        if (Questionario.Medicacao.Flags.PDF || Questionario.Medicacao.TemMedicacao)
        {
            conteudo += "‚ïê‚ïê‚ïê 6) MEDICA√á√ÉO ATUAL ‚ïê‚ïê‚ïê\n";
            if (Questionario.Medicacao.SemMedicacao)
            {
                conteudo += "‚úÖ Sem medica√ß√£o\n";
            }
            else
            {
                conteudo += $"{Questionario.Medicacao.ResumoMedicacao}\n";
            }
            conteudo += "\n";
        }

        // Adicionar conte√∫do do sistema antigo (compatibilidade)
        foreach (var expander in Expanders.Where(e => e.Flags.IncluirNoPdf))
        {
            conteudo += $"‚ïê‚ïê‚ïê {expander.Titulo} ‚ïê‚ïê‚ïê\n";
            
            foreach (var item in expander.Items.Where(i => i.Flags.GetIncluirNoPdf(expander.Flags)))
            {
                if (item.TipoItem == "sintoma" && item.Intensidade.HasValue && item.Intensidade > 0)
                {
                    conteudo += $"‚Ä¢ {item.Nome}: intensidade {item.Intensidade}/10\n";
                }
                else if (!string.IsNullOrEmpty(item.Conteudo))
                {
                    conteudo += $"‚Ä¢ {item.Nome}: {item.Conteudo}\n";
                }
            }
            conteudo += "\n";
        }
        
        return conteudo;
    }

    public void CarregarPaciente(Paciente paciente)
    {
        PacienteAtual = paciente;
        
        // Carregar dados do paciente no question√°rio
        if (paciente != null)
        {
            // Pr√©-popular identifica√ß√£o com dados do paciente
            Questionario.Identificacao.NomeCompleto = paciente.Nome ?? string.Empty;
            // Outros campos podem ser mapeados conforme dispon√≠vel
        }
        
        StatusMessage = $"üìã Question√°rio m√©dico carregado para {paciente?.Nome ?? "paciente"}";
        _logger?.LogInformation("QuestionarioCompleto carregado para paciente {PacienteId}", paciente?.Id);
    }

    // M√©todos de compatibilidade com sistema antigo
    private void InicializarEstruturaPadrao()
    {
        // Manter algumas estruturas legacy para transi√ß√£o suave
        // TODO: Remover ap√≥s migra√ß√£o completa para QuestionarioCompleto
    }

    private string FormatarItemParaTimeline(ItemAnamnese item) => 
        item.TipoItem == "sintoma" && item.Intensidade.HasValue && item.Intensidade > 0
            ? $"{item.Nome} ({item.Intensidade}/10) - {item.Estado}"
            : $"{item.Nome}: {item.Conteudo}";

    private string DeterminarTipoOperacao(ItemAnamnese item) =>
        item.TipoItem == "sintoma" && item.Intensidade > 0 ? "atualizar"
        : !string.IsNullOrEmpty(item.Conteudo) ? "adicionar" 
        : "avaliar";

    private string GerarDescricaoDelta(ItemAnamnese item) =>
        item.TipoItem == "sintoma" && item.Intensidade.HasValue
            ? $"Atualizar '{item.Nome}': intensidade {item.Intensidade}/10, estado {item.Estado}?"
            : $"Adicionar '{item.Nome}' ao perfil permanente?";

    public void Dispose()
    {
        // Cleanup
    }
}