using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Linq;

namespace BioDesk.Domain.Entities;

/// <summary>
/// EXPANDER 8) HIST√ìRIA FAMILIAR üü° IMPORTANTE
/// Antecedentes familiares relevantes - doen√ßas heredit√°rias, factores de risco
/// CHIP (doen√ßas) ¬∑ DD (parentesco) ¬∑ CHK (vivo/falecido) ¬∑ NUM (idade) ¬∑ TXTL (observa√ß√µes)
/// </summary>
public class HistoriaFamiliarExpander : ExpanderBase
{
    public override PrioridadeClinica PrioridadeClinica => PrioridadeClinica.Importante;
    public override string NomeExpander => "8) Hist√≥ria Familiar";

    // ESTADO GLOBAL
    private bool _semHistoriaRelevante = false;

    // ANTECEDENTES FAMILIARES
    private List<AntecedenteFamiliar> _antecedentes = new();

    // OBSERVA√á√ïES
    private string _observacoes = string.Empty;

    // PROPRIEDADES
    public bool SemHistoriaRelevante
    {
        get => _semHistoriaRelevante;
        set
        {
            _semHistoriaRelevante = value;
            if (value)
            {
                Antecedentes.Clear();
                OnPropertyChanged(nameof(Antecedentes));
            }
            OnPropertyChanged();
        }
    }

    public List<AntecedenteFamiliar> Antecedentes
    {
        get => _antecedentes;
        set { _antecedentes = value; OnPropertyChanged(); }
    }

    public string Observacoes
    {
        get => _observacoes;
        set { _observacoes = value; OnPropertyChanged(); }
    }

    // PROPRIEDADES CALCULADAS
    public bool TemAntecedentes => Antecedentes.Count > 0;
    
    public int TotalAntecedentes => Antecedentes.Count;

    public List<AntecedenteFamiliar> AntecedentesCriticos => Antecedentes
        .Where(a => DoencasCriticas.Contains(a.Doenca))
        .ToList();

    public bool TemRiscoGenetico => AntecedentesCriticos.Count > 0;

    public Dictionary<string, int> AntecedentesPorParentesco
    {
        get
        {
            return Antecedentes
                .GroupBy(a => a.Parentesco)
                .ToDictionary(g => g.Key, g => g.Count());
        }
    }

    public string ResumoHistoriaFamiliar
    {
        get
        {
            if (SemHistoriaRelevante) return "Sem hist√≥ria familiar relevante";
            if (!TemAntecedentes) return "N√£o avaliado";
            
            var risco = TemRiscoGenetico ? " | Risco gen√©tico" : "";
            return $"{TotalAntecedentes} antecedente(s){risco}";
        }
    }

    // DOEN√áAS COM COMPONENTE GEN√âTICO SIGNIFICATIVO
    private static readonly List<string> DoencasCriticas = new()
    {
        "Cancro da mama",
        "Cancro do c√≥lon",
        "Cancro do ov√°rio",
        "Cancro da pr√≥stata",
        "Doen√ßa card√≠aca coron√°ria",
        "Enfarte do mioc√°rdio",
        "Diabetes tipo 1",
        "Diabetes tipo 2",
        "Hipertens√£o arterial",
        "AVC",
        "Doen√ßa de Alzheimer",
        "Doen√ßa de Parkinson",
        "Huntington",
        "Esclerose m√∫ltipla",
        "Fibrose qu√≠stica",
        "Hemofilia",
        "Anemia falciforme",
        "Talassemia"
    };

    // VALIDA√á√ÉO
    public bool IsValid => SemHistoriaRelevante || TemAntecedentes;

    public List<string> GetValidationErrors()
    {
        var errors = new List<string>();
        
        if (!SemHistoriaRelevante && !TemAntecedentes)
            errors.Add("√â necess√°rio especificar antecedentes familiares ou marcar 'Sem hist√≥ria relevante'");
        
        foreach (var antecedente in Antecedentes)
        {
            if (string.IsNullOrWhiteSpace(antecedente.Doenca))
                errors.Add("Doen√ßa do antecedente n√£o pode estar vazia");
            if (string.IsNullOrWhiteSpace(antecedente.Parentesco))
                errors.Add("Parentesco do antecedente n√£o pode estar vazio");
        }
        
        return errors;
    }

    // M√âTODOS HELPER
    public void AdicionarAntecedente(string doenca, string parentesco)
    {
        if (!string.IsNullOrWhiteSpace(doenca) && !string.IsNullOrWhiteSpace(parentesco))
        {
            var novoAntecedente = new AntecedenteFamiliar 
            { 
                Doenca = doenca, 
                Parentesco = parentesco 
            };
            Antecedentes.Add(novoAntecedente);
            OnPropertyChanged(nameof(Antecedentes));
            OnPropertyChanged(nameof(TemAntecedentes));
            OnPropertyChanged(nameof(ResumoHistoriaFamiliar));
        }
    }

    // AN√ÅLISE DE RISCO GEN√âTICO (simplificada)
    public string AvaliacaoRiscoGenetico
    {
        get
        {
            if (!TemRiscoGenetico) return "Risco gen√©tico baixo";
            
            var riscoAlto = AntecedentesCriticos.Count(a => 
                (a.Parentesco == "Pai" || a.Parentesco == "M√£e") ||
                (a.IdadeObito.HasValue && a.IdadeObito < 60));
                
            if (riscoAlto > 0)
                return "‚ö†Ô∏è Risco gen√©tico elevado - Considerar rastreio";
            else
                return "‚ö° Risco gen√©tico moderado";
        }
    }
}

/// <summary>
/// Antecedente familiar individual
/// </summary>
public class AntecedenteFamiliar : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler? PropertyChanged;

    private string _doenca = string.Empty;
    private string _parentesco = string.Empty;
    private bool _vivo = true;
    private int? _idadeAtual;
    private int? _idadeObito;
    private int? _idadeDiagnostico;
    private string _observacoes = string.Empty;

    public string Doenca
    {
        get => _doenca;
        set { _doenca = value; OnPropertyChanged(); }
    }

    public string Parentesco
    {
        get => _parentesco;
        set { _parentesco = value; OnPropertyChanged(); }
    }

    public bool Vivo
    {
        get => _vivo;
        set { _vivo = value; OnPropertyChanged(); }
    }

    public int? IdadeAtual
    {
        get => _idadeAtual;
        set { _idadeAtual = value; OnPropertyChanged(); }
    }

    public int? IdadeObito
    {
        get => _idadeObito;
        set { _idadeObito = value; OnPropertyChanged(); }
    }

    public int? IdadeDiagnostico
    {
        get => _idadeDiagnostico;
        set { _idadeDiagnostico = value; OnPropertyChanged(); }
    }

    public string Observacoes
    {
        get => _observacoes;
        set { _observacoes = value; OnPropertyChanged(); }
    }

    // PROPRIEDADES CALCULADAS
    public string StatusVital => Vivo ? "Vivo" : "Falecido";
    
    public string IdadeInfo
    {
        get
        {
            if (Vivo && IdadeAtual.HasValue)
                return $"{IdadeAtual} anos";
            else if (!Vivo && IdadeObito.HasValue)
                return $"‚úù {IdadeObito} anos";
            else
                return "Idade n√£o especificada";
        }
    }

    public string DiagnosticoInfo
    {
        get
        {
            if (IdadeDiagnostico.HasValue)
                return $"Diagn√≥stico aos {IdadeDiagnostico} anos";
            else
                return "Idade do diagn√≥stico n√£o especificada";
        }
    }

    public string AntecedenteCompleto => 
        $"{Parentesco}: {Doenca} ({StatusVital})";

    // OP√á√ïES PR√â-DEFINIDAS
    public static List<string> OpcoesParentesco => new()
    {
        // PARENTESCO DIRETO (1¬∫ grau)
        "Pai",
        "M√£e",
        "Filho",
        "Filha",
        "Irm√£o",
        "Irm√£",

        // PARENTESCO 2¬∫ GRAU
        "Av√¥ paterno",
        "Av√≥ paterna",
        "Av√¥ materno",
        "Av√≥ materna",
        "Tio paterno",
        "Tia paterna",
        "Tio materno",
        "Tia materna",
        "Meio-irm√£o",
        "Meia-irm√£",

        // PARENTESCO 3¬∫ GRAU
        "Primo",
        "Prima",
        "Bisav√¥",
        "Bisav√≥",

        // OUTROS
        "Padrasto",
        "Madrasta",
        "Outro familiar"
    };

    public static List<string> DoencasComuns => new()
    {
        // CARDIOVASCULARES
        "Doen√ßa card√≠aca coron√°ria",
        "Enfarte do mioc√°rdio",
        "AVC",
        "Hipertens√£o arterial",
        "Colesterol alto",
        "Morte s√∫bita card√≠aca",

        // CANCROS
        "Cancro da mama",
        "Cancro do pulm√£o",
        "Cancro do c√≥lon",
        "Cancro da pr√≥stata",
        "Cancro do ov√°rio",
        "Cancro do est√¥mago",
        "Cancro do f√≠gado",
        "Leucemia",
        "Linfoma",

        // METAB√ìLICAS
        "Diabetes tipo 1",
        "Diabetes tipo 2",
        "Obesidade",
        "Doen√ßas da tiroide",

        // NEUROL√ìGICAS
        "Doen√ßa de Alzheimer",
        "Dem√™ncia",
        "Doen√ßa de Parkinson",
        "Epilepsia",
        "Esclerose m√∫ltipla",
        "Huntington",

        // PSIQUI√ÅTRICAS
        "Depress√£o",
        "Dist√∫rbio bipolar",
        "Esquizofrenia",
        "Suic√≠dio",

        // GEN√âTICAS
        "Fibrose qu√≠stica",
        "Hemofilia",
        "Anemia falciforme",
        "Talassemia",
        "S√≠ndrome de Down",

        // OUTRAS
        "Asma",
        "Artrite reumatoide",
        "Doen√ßa inflamat√≥ria intestinal",
        "Doen√ßa renal cr√≥nica",
        "Glaucoma",
        "Osteoporose",
        "Alcoolismo",
        "Depend√™ncia de drogas",
        "Outra doen√ßa"
    };

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}