# ========================================
# üöÄ BIODESK PRO 2 - LIMPEZA TOTAL + BACKUP
# ========================================
# MASTER SCRIPT - FAZ TUDO:
# 1. Cria backup limpo do c√≥digo atual
# 2. Apaga backups locais antigos
# 3. Fresh start Git (apaga hist√≥rico)
# 4. Force push para GitHub
# ========================================

$ErrorActionPreference = "Stop"

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üöÄ LIMPEZA TOTAL + BACKUP - BIODESK PRO 2" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Este script vai executar TODAS as opera√ß√µes:" -ForegroundColor Yellow
Write-Host ""
Write-Host "  1Ô∏è‚É£  Criar NOVO backup limpo do c√≥digo atual" -ForegroundColor White
Write-Host "  2Ô∏è‚É£  Apagar TODOS os backups antigos (mant√©m apenas o novo)" -ForegroundColor White
Write-Host "  3Ô∏è‚É£  Apagar TODO o hist√≥rico Git" -ForegroundColor White
Write-Host "  4Ô∏è‚É£  Criar novo reposit√≥rio Git limpo" -ForegroundColor White
Write-Host "  5Ô∏è‚É£  Force push para GitHub (SOBRESCREVE reposit√≥rio remoto)" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: OPERA√á√ïES IRREVERS√çVEIS!" -ForegroundColor Red
Write-Host "   ‚Ä¢ Backups antigos ser√£o APAGADOS PERMANENTEMENTE" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Hist√≥rico Git ser√° PERDIDO PERMANENTEMENTE" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Reposit√≥rio GitHub ser√° SOBRESCRITO" -ForegroundColor Yellow
Write-Host ""

$confirmacao = Read-Host "Digite 'CONFIRMO TUDO' para continuar"

if ($confirmacao -ne "CONFIRMO TUDO") {
    Write-Host ""
    Write-Host "‚ùå Opera√ß√£o cancelada." -ForegroundColor Red
    Write-Host ""
    exit
}

$timestamp = Get-Date -Format "yyyyMMdd_HHmm"
$origem = "C:\Users\Nuno Correia\OneDrive\Documentos\BioDeskPro2"

# ========================================
# FASE 1: CRIAR BACKUP LIMPO
# ========================================

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "FASE 1: CRIANDO BACKUP LIMPO" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

$pastaBackups = "C:\Users\Nuno Correia\OneDrive\Documentos\Backups_BioDeskPro2"
$nomeBackup = "BioDeskPro2_FUNCIONAL_$timestamp"
$destino = Join-Path $pastaBackups $nomeBackup

# Criar pasta de backups se n√£o existir
if (-not (Test-Path $pastaBackups)) {
    New-Item -ItemType Directory -Path $pastaBackups -Force | Out-Null
    Write-Host "‚úÖ Pasta de backups criada" -ForegroundColor Green
}

Write-Host "üìÅ Criando: $nomeBackup" -ForegroundColor Yellow
New-Item -ItemType Directory -Path $destino -Force | Out-Null

Write-Host "üìã Copiando ficheiros essenciais (sem obj/bin/logs)..." -ForegroundColor Yellow

# Pastas a EXCLUIR
$excluir = @(
    "obj",
    "bin",
    "Debug",
    "Release",
    ".vs",
    ".vscode",
    "node_modules",
    "packages",
    ".git"
)

# Ficheiros a EXCLUIR
$excluirFicheiros = @(
    "*.db-shm",
    "*.db-wal",
    "LOGS_DEBUG.txt",
    "*.log",
    "*.tmp",
    "*.temp"
)

# Fun√ß√£o para verificar se deve excluir
function Should-Exclude($path) {
    foreach ($item in $excluir) {
        if ($path -like "*\$item\*" -or $path -like "*\$item") {
            return $true
        }
    }
    return $false
}

# Contador de ficheiros
$fileCount = 0

# Copiar recursivamente
Get-ChildItem -Path $origem -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
    $relativePath = $_.FullName.Substring($origem.Length)
    $targetPath = Join-Path $destino $relativePath

    # Verificar se deve excluir
    if (Should-Exclude $_.FullName) {
        return
    }

    # Verificar extens√£o de ficheiro
    $skip = $false
    foreach ($pattern in $excluirFicheiros) {
        if ($_.Name -like $pattern) {
            $skip = $true
            break
        }
    }
    if ($skip) { return }

    # Copiar
    if ($_.PSIsContainer) {
        New-Item -ItemType Directory -Path $targetPath -Force -ErrorAction SilentlyContinue | Out-Null
    } else {
        Copy-Item -Path $_.FullName -Destination $targetPath -Force -ErrorAction SilentlyContinue
        $fileCount++
    }
}

Write-Host "   ‚úÖ $fileCount ficheiros copiados" -ForegroundColor Green

# Criar README do backup
$readmeContent = @"
# üöÄ BIODESK PRO 2 - BACKUP FUNCIONAL
**Data:** $(Get-Date -Format "dd/MM/yyyy HH:mm")
**Status:** ‚úÖ SISTEMA 100% FUNCIONAL

## ‚úÖ FUNCIONALIDADES IMPLEMENTADAS:

### 1. Camera sem Freeze (Triple Deadlock Fix)
- StartPreviewAsync sem .Wait()
- StopPreviewAsync com Task.Run + polling ass√≠ncrono
- Camera para SEMPRE antes de MessageBox

### 2. UI Irisdiagn√≥stico Reconstru√≠da
- Grid 2 colunas (galeria + preview)
- Bot√µes icon-only modernos (‚äïüì∑üóëÔ∏è)
- Preview + Zoom + ColorPicker terroso
- Canvas para marca√ß√µes

### 3. Paleta de Cores Terrosa
- 4 cores: Vermelho Terroso, Verde Musgo, Azul Petr√≥leo, Amarelo Mostarda
- Sele√ß√£o visual com bordas din√¢micas

### 4. Bot√£o Remove Funcional (File Lock Fix)
- PathToImageSourceConverter com BitmapCacheOption.OnLoad
- Carrega imagem em mem√≥ria e liberta ficheiro
- Delete de ficheiros f√≠sicos funcionando perfeitamente

## üèóÔ∏è ARQUITETURA:

- .NET 8.0 LTS
- WPF com MVVM (CommunityToolkit.Mvvm)
- Entity Framework Core 8.0.8 + SQLite
- Dependency Injection (Microsoft.Extensions.DependencyInjection)
- FluentValidation para valida√ß√µes
- AForge.NET para c√¢mara USB

## üìÇ ESTRUTURA:

\`\`\`
BioDeskPro2/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ BioDesk.App/           # WPF UI
‚îÇ   ‚îú‚îÄ‚îÄ BioDesk.ViewModels/    # MVVM ViewModels
‚îÇ   ‚îú‚îÄ‚îÄ BioDesk.Domain/        # Entidades
‚îÇ   ‚îú‚îÄ‚îÄ BioDesk.Data/          # EF Core + Repositories
‚îÇ   ‚îî‚îÄ‚îÄ BioDesk.Services/      # Servi√ßos (Navega√ß√£o, C√¢mara, etc)
‚îú‚îÄ‚îÄ global.json                # .NET 8 SDK fixo
‚îî‚îÄ‚îÄ BioDeskPro2.sln
\`\`\`

## üéØ BUILD:

\`\`\`powershell
dotnet build
dotnet run --project src/BioDesk.App
\`\`\`

## ‚úÖ STATUS: PRONTO PARA PRODU√á√ÉO

---

**Este backup foi criado automaticamente pelo script LIMPEZA_TOTAL.ps1**
"@

Set-Content -Path (Join-Path $destino "README_BACKUP.md") -Value $readmeContent -Encoding UTF8

$backupSize = (Get-ChildItem -Path $destino -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB

Write-Host ""
Write-Host "‚úÖ BACKUP CRIADO COM SUCESSO!" -ForegroundColor Green
Write-Host "   üìÅ Localiza√ß√£o: $nomeBackup" -ForegroundColor Cyan
Write-Host "   üìä Tamanho: $([math]::Round($backupSize, 2)) MB" -ForegroundColor Cyan

# ========================================
# FASE 2: APAGAR BACKUPS ANTIGOS
# ========================================

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "FASE 2: LIMPANDO BACKUPS ANTIGOS" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

$backups = Get-ChildItem -Path $pastaBackups -Directory | Sort-Object Name -Descending

if ($backups.Count -gt 1) {
    Write-Host "üìã BACKUPS EXISTENTES:" -ForegroundColor Yellow
    Write-Host ""

    for ($i = 0; $i -lt $backups.Count; $i++) {
        $backup = $backups[$i]
        $tamanho = (Get-ChildItem -Path $backup.FullName -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB

        if ($i -eq 0) {
            Write-Host "   ‚úÖ $($backup.Name) - $([math]::Round($tamanho, 2)) MB [MANTIDO]" -ForegroundColor Green
        } else {
            Write-Host "   üóëÔ∏è  $($backup.Name) - $([math]::Round($tamanho, 2)) MB [APAGANDO]" -ForegroundColor Gray
        }
    }

    Write-Host ""
    Write-Host "üóëÔ∏è  Apagando $($backups.Count - 1) backup(s) antigo(s)..." -ForegroundColor Yellow

    $apagados = 0
    $espacoLiberado = 0

    for ($i = 1; $i -lt $backups.Count; $i++) {
        $backup = $backups[$i]
        $tamanho = (Get-ChildItem -Path $backup.FullName -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB

        Remove-Item -Path $backup.FullName -Recurse -Force -ErrorAction SilentlyContinue

        $apagados++
        $espacoLiberado += $tamanho
    }

    Write-Host ""
    Write-Host "‚úÖ Backups antigos apagados!" -ForegroundColor Green
    Write-Host "   ‚Ä¢ Apagados: $apagados" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Espa√ßo liberado: $([math]::Round($espacoLiberado, 2)) MB" -ForegroundColor Cyan
} else {
    Write-Host "‚ÑπÔ∏è  Apenas 1 backup existe (nada a apagar)" -ForegroundColor Gray
}

# ========================================
# FASE 3: GIT FRESH START
# ========================================

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "FASE 3: GIT FRESH START" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

Set-Location $origem

# Verificar altera√ß√µes n√£o commitadas
Write-Host "üìä Verificando estado do reposit√≥rio..." -ForegroundColor Gray
$statusOutput = git status --short 2>&1

if ($statusOutput) {
    Write-Host ""
    Write-Host "‚ÑπÔ∏è  Altera√ß√µes detectadas ser√£o inclu√≠das no novo commit inicial" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üóëÔ∏è  Removendo hist√≥rico Git antigo..." -ForegroundColor Yellow

if (Test-Path ".git") {
    Remove-Item -Path ".git" -Recurse -Force
    Write-Host "   ‚úÖ Hist√≥rico Git removido" -ForegroundColor Green
}

Write-Host ""
Write-Host "üîß Inicializando novo reposit√≥rio..." -ForegroundColor Yellow
git init
git branch -M main
Write-Host "   ‚úÖ Reposit√≥rio inicializado (branch: main)" -ForegroundColor Green

Write-Host ""
Write-Host "üìù Criando .gitignore otimizado..." -ForegroundColor Yellow
$gitignoreContent = @"
# Build results
[Dd]ebug/
[Rr]elease/
[Bb]in/
[Oo]bj/
x64/
x86/
build/
bld/

# Visual Studio cache/options
.vs/
.vscode/
*.user
*.suo
*.userosscache
*.sln.docstates

# SQLite temporary files
*.db-shm
*.db-wal

# Logs
*.log
LOGS_DEBUG.txt

# Temporary files
*.tmp
*.temp

# NuGet Packages
*.nupkg
**/packages/*
!**/packages/build/

# Node modules
node_modules/

# Backups
Backups_*/
*.bak
*.backup

# OS generated files
.DS_Store
Thumbs.db
"@

Set-Content -Path ".gitignore" -Value $gitignoreContent -Encoding UTF8
Write-Host "   ‚úÖ .gitignore criado" -ForegroundColor Green

Write-Host ""
Write-Host "üì¶ Adicionando ficheiros ao reposit√≥rio..." -ForegroundColor Yellow
git add .
$filesAdded = (git diff --cached --name-only | Measure-Object -Line).Lines
Write-Host "   ‚úÖ $filesAdded ficheiros adicionados" -ForegroundColor Green

Write-Host ""
Write-Host "üíæ Criando commit inicial..." -ForegroundColor Yellow
$commitMessage = @"
üöÄ BioDeskPro2 - Sistema 100% Funcional

‚úÖ FUNCIONALIDADES IMPLEMENTADAS:

1. Camera sem Freeze (Triple Deadlock Fix)
   - StartPreviewAsync sem .Wait()
   - StopPreviewAsync com Task.Run + polling ass√≠ncrono
   - Camera para SEMPRE antes de mostrar MessageBox

2. UI Irisdiagn√≥stico Reconstru√≠da
   - Grid 2 colunas (galeria + preview)
   - Bot√µes icon-only modernos (‚äïüì∑üóëÔ∏è)
   - Preview + Zoom + ColorPicker terroso
   - Canvas para marca√ß√µes

3. Paleta de Cores Terrosa
   - 4 cores: Vermelho Terroso, Verde Musgo, Azul Petr√≥leo, Amarelo Mostarda
   - Sele√ß√£o visual com bordas din√¢micas

4. Bot√£o Remove Funcional (File Lock Fix)
   - PathToImageSourceConverter com BitmapCacheOption.OnLoad
   - Carrega imagem em mem√≥ria e liberta ficheiro
   - Delete de ficheiros f√≠sicos funcionando perfeitamente

üìö STACK TECNOL√ìGICA:
- .NET 8.0 LTS
- WPF + MVVM (CommunityToolkit.Mvvm)
- Entity Framework Core 8.0.8 + SQLite
- Dependency Injection (Microsoft.Extensions.DependencyInjection)
- FluentValidation para valida√ß√µes robustas
- AForge.NET para c√¢mara USB

üìÇ ARQUITETURA:
- BioDesk.App (WPF UI)
- BioDesk.ViewModels (MVVM ViewModels)
- BioDesk.Domain (Entidades)
- BioDesk.Data (EF Core + Repositories)
- BioDesk.Services (Navega√ß√£o, C√¢mara, Email, etc)

‚úÖ STATUS: PRONTO PARA PRODU√á√ÉO

üî® BUILD:
dotnet build
dotnet run --project src/BioDesk.App
"@

git commit -m "$commitMessage"
Write-Host "   ‚úÖ Commit inicial criado" -ForegroundColor Green

Write-Host ""
Write-Host "üîó Configurando remote do GitHub..." -ForegroundColor Yellow
$remoteUrl = "https://github.com/NunoCorreia78/BioDeskPRO2.0.git"
git remote remove origin 2>$null
git remote add origin $remoteUrl
Write-Host "   ‚úÖ Remote configurado: $remoteUrl" -ForegroundColor Green

# ========================================
# FASE 4: PUSH PARA GITHUB
# ========================================

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "FASE 4: PUSH PARA GITHUB" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚ö†Ô∏è  Pr√≥ximo passo: SOBRESCREVER reposit√≥rio no GitHub!" -ForegroundColor Red
Write-Host "    Todo o hist√≥rico antigo ser√° PERDIDO PERMANENTEMENTE!" -ForegroundColor Red
Write-Host ""

$pushConfirm = Read-Host "Fazer force push para GitHub agora? (S/N)"

if ($pushConfirm -eq "S" -or $pushConfirm -eq "s") {
    Write-Host ""
    Write-Host "üöÄ Fazendo force push para GitHub..." -ForegroundColor Yellow
    Write-Host ""

    git push -f origin main

    Write-Host ""
    Write-Host "‚úÖ Push conclu√≠do com sucesso!" -ForegroundColor Green
} else {
    Write-Host ""
    Write-Host "‚è≠Ô∏è  Push cancelado. Pode fazer manualmente depois:" -ForegroundColor Yellow
    Write-Host "   git push -f origin main" -ForegroundColor Cyan
}

# ========================================
# RESUMO FINAL
# ========================================

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "‚úÖ LIMPEZA TOTAL CONCLU√çDA!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä RESUMO DAS OPERA√á√ïES:" -ForegroundColor Yellow
Write-Host ""
Write-Host "1Ô∏è‚É£  BACKUP CRIADO:" -ForegroundColor White
Write-Host "   ‚úÖ Nome: $nomeBackup" -ForegroundColor Green
Write-Host "   ‚úÖ Localiza√ß√£o: $pastaBackups" -ForegroundColor Green
Write-Host "   ‚úÖ Tamanho: $([math]::Round($backupSize, 2)) MB" -ForegroundColor Green
Write-Host "   ‚úÖ Ficheiros: $fileCount" -ForegroundColor Green
Write-Host ""
Write-Host "2Ô∏è‚É£  BACKUPS ANTIGOS:" -ForegroundColor White

if ($apagados -gt 0) {
    Write-Host "   ‚úÖ Apagados: $apagados backup(s)" -ForegroundColor Green
    Write-Host "   ‚úÖ Espa√ßo liberado: $([math]::Round($espacoLiberado, 2)) MB" -ForegroundColor Green
} else {
    Write-Host "   ‚ÑπÔ∏è  Nenhum backup antigo para apagar" -ForegroundColor Gray
}

Write-Host ""
Write-Host "3Ô∏è‚É£  GIT REPOSITORY:" -ForegroundColor White
Write-Host "   ‚úÖ Hist√≥rico antigo removido" -ForegroundColor Green
Write-Host "   ‚úÖ Novo reposit√≥rio inicializado" -ForegroundColor Green
Write-Host "   ‚úÖ Ficheiros adicionados: $filesAdded" -ForegroundColor Green
Write-Host "   ‚úÖ Commit inicial criado" -ForegroundColor Green
Write-Host ""
Write-Host "4Ô∏è‚É£  GITHUB:" -ForegroundColor White

if ($pushConfirm -eq "S" -or $pushConfirm -eq "s") {
    Write-Host "   ‚úÖ Force push conclu√≠do" -ForegroundColor Green
    Write-Host "   üåê https://github.com/NunoCorreia78/BioDeskPRO2.0" -ForegroundColor Cyan
} else {
    Write-Host "   ‚è≠Ô∏è  Push pendente (executar manualmente)" -ForegroundColor Yellow
    Write-Host "   üìù Comando: git push -f origin main" -ForegroundColor Cyan
}

Write-Host ""
Write-Host "üéØ RESULTADO FINAL:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Sistema limpo e organizado" -ForegroundColor Green
Write-Host "   ‚úÖ Backup seguro criado" -ForegroundColor Green
Write-Host "   ‚úÖ Reposit√≥rio Git limpo (1 commit)" -ForegroundColor Green
Write-Host "   ‚úÖ Pronto para continuar desenvolvimento!" -ForegroundColor Green
Write-Host ""
